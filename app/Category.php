<?php

namespace App;

use Cviebrock\EloquentSluggable\Sluggable;
use Cviebrock\EloquentSluggable\Services\SlugService;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Kalnoy\Nestedset\NodeTrait;
use Illuminate\Support\Facades\DB;



class Category extends Model
{

    protected $fillable = ['name', 'image', 'meta_title', 'meta_description'];

    use Sluggable , NodeTrait {
        NodeTrait::replicate as replicateNode;
        Sluggable::replicate as replicateSlug;
    }

    public function replicate(array $except = null)
    {
        $instance = $this->replicateNode($except);
        (new SlugService())->slug($instance, true);

        return $instance;
    }
    public function sluggable()
    {
        return [
            'slug' => [
                'source' => 'name'
            ]
        ];
    }

    public static function rootCategories(){
        return Category::whereIsRoot()->get();
        //return Category::all()->where('parent_id', '=', null);
    }
    public function children(){
        return $this->hasMany('\App\Category', 'parent_id');
    }

    public function ads(){
        return $this->hasMany('\App\Ad');
    }

    public function allDescendantAds(){
        $my_query = DB::table('ads')->where(function($query){
            $query->orWhere('category_id', $this->id);
            $descendants = $this->descendants()->get(['id']);

            foreach ($descendants as $key => $descendant){

                //if($descendant == $descendants->last()) $query->where('category_id', $descendant->id);
                $query->orWhere('category_id', $descendant->id);
            }
        });

            //$my_query->where('price', '>=', 5500);

            //dd($my_query);
//        $query = DB::table('ads')->orWhere('category_id', $this->id);
//        foreach ($descendants as $descendant){
//            $query->orWhere('category_id', $descendant->id);
//        }
        return $my_query;
    }



    public static function allParents($root){
        $data = new Collection();
        $parent = $root->parent;
        while($parent){
            $data->prepend($parent);
            $parent = $parent->parent;
        }

        return $data;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function($category){
            if($category->image != '/img/no-image.png')
                Storage::delete($category->image);
        });
    }

}
