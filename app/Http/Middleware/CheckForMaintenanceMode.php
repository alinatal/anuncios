<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Foundation\Http\Exceptions\MaintenanceModeException;
use Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode as Middleware;
use Illuminate\Http\RedirectResponse;
use Symfony\Component\HttpFoundation\IpUtils;

class CheckForMaintenanceMode extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array
     */
    protected $except = [
        'mantenimiento',
        'api/deploy',
    ];

    public function handle($request, Closure $next)
    {
        if ($this->app->isDownForMaintenance()) {
            $data = json_decode(file_get_contents($this->app->storagePath().'/framework/down'), true);

            if (isset($data['allowed']) && IpUtils::checkIp($request->ip(), (array) $data['allowed'])) {
                return $next($request);
            }

            if(isset($request->access) && $request->access == '4nunci0s'){
                $data['allowed'] = array_merge($data['allowed'] , [$request->ip()]);
                file_put_contents($this->app->storagePath().'/framework/down', json_encode($data));
                return new RedirectResponse(route('main'));
            }


            if ($this->inExceptArray($request)) {
                return $next($request);
            }

            //throw new MaintenanceModeException($data['time'], $data['retry'], $data['message']);
            return new RedirectResponse(route('maintenance'));
        }

        return $next($request);
        //return parent::handle($request, $next); // TODO: Change the autogenerated stub
    }
}
